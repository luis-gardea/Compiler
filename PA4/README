user: lgardea
user: rdsilva

Write-up for PA4
----------------

Data structures:
To track inheritence we used the CGenNode/Tree structure provided in the handout, along
with adding a couple more funcitons to the code base. To track class tags we kept a map from
Symbols to ints. To implement the Class mapping as defined in the Cool manual, we kept a map 
from Symbol to a vector of names of attributes (including inherited attributes and current
attributes were pushed to the back). We used the Class map to maintain a record of where
attributes were stored in an object, as this was our record of how prototype objects were layed out.
We built the Implmentation mapping in conjunction with creating the dispatch tables.
We built used a map from (classname, name) to a list of feature names. 
We used the Implementation map in dispatching in order to find the correct offset of the
method address in the dispatch table. We kept two symbol tables- one that held a convenient mapping
from Symbol name to CGenNode. We also used this to track SELF_TYPE. We kept another symbol
table keeping track of variables in the program. At the start of code generation, we pushed
a new scope and added variables to the symbol table. We stored the offset of the variable from the 
current frame pointer in the symbol table. At then end of a method we popped the scope.

Phases:
The first phase encodes meta data, program constants, and memory that lives in the global
data section. Specifically, we set class tags, create our data structures, make the object
and name tables, define object prototypes and define dipatch tables. We then move on to code 
generation for the init methods of all objects. Then we generate code for the methods of the
program. Both of these phases rely on code generation of all expression of the program.

Testing:
We built our code generator in phases. We first tested that the data segments were correct 
(or so we thought at the time). We then implmented the init methods without any initialization
expressions for attributes and tested against the reference. This allowed us to start thinking
about method setup and takedown and test this part before actually generating code for the
expressions. We then coded the methods, and to do this we incrementally added functionality for 
parts of the language and tested each expression seperately and together with the other expression 
already generated. Finally, we tested on full programs, and we had some serious bugs that went all
the way back to the first phase of generating the tables. By far the most time was spent debugging
errors we had unknowingly made coding the first parts of the assignment. In retrospect having a 
better idea of the full scope of the project before starting any part of the code generator would 
have been useful.