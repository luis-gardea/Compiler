user: lgardea
user: rdsilva

Write-up for PA1
----------------

When defining our regular expressions, we wrote expressions for digits, types, and objects, as those three would be encountered often and have a specific syntax. We also included all of the keywords, which was done in a straightforward way according to flex, making sure to also return the correct constant and value. We manually added all of the different single- and multiple-character operators supported by COOL, as well as whitespace and \n, which also incremented the line count.

We had three different start conditions: COMMENT, STRING, and BADSTRING. 
COMMENT was written to handle nested block comments. The main way we did this was anytime a "(*" was encountered, a global variable called comment_depth was incremented and everytime a "*)" was encountered, that value was decremented. Once comment_depth goes back to zero, then BEGIN(INITIAL) is called, so we want to exit the COMMENT condition. An error was returned if the comment was not closed before EOF, it was also returned if a lone "*)" was encountered when there was no "(*". \n also incremented the number of lines when encountered within a comment. Single line comments were also implemented.
STRING was called whenever a " was encountered. Anything before a closing quotation mark is considered part of the string. We handled various error cases. When an unescaped \n was found, an error was returned and the \n was determined to be the end of the string. EOF within a string also returns an error. Special characters were read in and added to the outputted string. Two error cases lead to the calling of BADSTRING. When the null character was found in a string BADSTRING was called. The other case involved the use of a global variable called num_chars and a global method called check_overflow. Check_overflow would check if the string buffer contained too many characters after num_chars counted them and then was compared to MAX_STR_CONST; if the string was too long then BEGIN(BADSTRING) was called.
BADSTRING just reads all input until the end of a string. This means that it will stop reading once it encounters a \n or ". This is because once we have a string containing \0 or is too long, we no longer care about the rest of the string so we want to go to the end.
In the case when EOF was encountered in either STRING or COMMENT, there was odd behavior when terminating it so BEGIN(INITIAL) was called and then EOF was terminated there after an error had been erased. 
For parts of our STRING and COMMENT code, we used excerps from the Flex manual.

The way we handled comments is correct as within a comment newlines were counted. We also made sure to allow for arbitrary levels of depth, but once the final closing brace was read, the comment ended. All of the input within the comment was ignored. We made sure to handle the cases of EOF within a comment. We also made sure to handle the case where an unmatched *) is found. For single line comments, we made sure to read them until \n was found, at which point the line count was updated.

For strings, we handled all error cases in the handout. We raise errors for unescaped newlines, EOFs, null characters, and strings that exceed multiple length. To test this functionality, we included the following tricky test cases: multiple escaped and unescaped newlines, multiple null characters, newlines after null characters and overly long strings. We made sure that escape sequences were recognized, such as escaped newlines, and tested both in the same string. We made sure that backslashes were correctly recognized, and tested the cases “\”, “\\\n”, “\\”, ”string\”. Finally, we made sure that the correct error strings and tokens were returned, and that curr_line_no was updated correctly. 

We made sure that all token types were accounted for in our regex rules. We handled all other tokens elegantly with error messages. Our testing strategy was to make a new file for each testing case we thought of both during and after we were coding. Since we only had about 20 test cases, we did not make a testing harness but for future assignments as the number of tests gets larger we will develop testing code. 

Another aspect of our testing involved running example code given to us with our lexer and the reference compiler. The results were good and the ran without problems.
